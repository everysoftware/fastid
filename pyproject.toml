[tool.poetry]
name = "fastid"
version = "0.1.0"
description = "Effortless authentication solution for your services"
authors = ["Ivan Stasevich <pravitel2015ify@gmail.com>"]
readme = "README.md"


[tool.poetry.dependencies]
python = "^3.12"
fastapi = {extras = ["all"], version = "^0.115.5"}
sqlalchemy = { extras = ["asyncio"], version = "^2.0.30" }
gunicorn = "^22.0.0"
alembic = "^1.13.1"
asyncpg = "^0.29.0"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
pyjwt = {extras = ["crypto"], version = "^2.9.0"}
sqladmin = "^0.19.0"
humanize = "^4.10.0"
redis = "^5.0.8"
aiogram = "^3.13.0"
opentelemetry-sdk = "^1.31.1"
opentelemetry-instrumentation-fastapi = "^0.52b1"
opentelemetry-instrumentation-logging = "^0.52b1"
opentelemetry-exporter-otlp = "^1.31.1"
prometheus-client = "^0.21.0"
uvicorn-worker = "^0.2.0"
opentelemetry-instrumentation-sqlalchemy = "^0.52b1"
opentelemetry-instrumentation-httpx = "^0.52b1"
fast-depends = "^2.4.12"
uuid-utils = "^0.9.0"
typer = "^0.14.0"
auth365 = "^0.1.2"


[tool.poetry.group.dev.dependencies]
mypy = "^1.10.0"
ruff = "^0.7.1"
pre-commit = "^3.7.0"
pytest = "^8.2.0"
pytest-asyncio = "^0.23.6"
sqlalchemy-utils = "^0.41.2"
faker = "^28.4.1"
codespell = "^2.4.1"
detect-secrets = "^1.5.0"
coverage = {extras = ["html"], version = "^7.8.0"}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py310"
output-format = "concise"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "RUF",  # ruff rules
    "C90",  # mccabe
    "N",  # pep8-naming
    "ASYNC",  # flake8-async
    "T20",  # flake8-print
    "SIM",  # flake8-simplify
    "PT",  # flake8-pytest-style
    "PTH",  # flake8-puse-pathlib
    "TCH",  # flake8-type-checking
    "PERF",  # Perflint
    # new
    "S",  # flake8-bandit
    "FBT",  # flake8-boolean-trap
    "A",  # flake8-builtins
    "DTZ",  # flake8-datetimez
    "FA",  # flake8-future-annotations
    "LOG",  # flake8-logging
    "G",  # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "FLY",  # flynt
    "PGH",  # pygrep-hooks
    "PL",  # pylint
    "FURB",  # refurb
    "TRY",  # tryceratops
]
ignore = [
    "E501",  # line too long, handled by formatter later
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "RUF012",  # mutable class attributes should be annotated with `typing.ClassVar`
    "S101",  # use of assert detected
    "TRY003",  # avoid specifying long messages outside the exception class
    "PLR6301",  # method could be a function, class method, or static method
]

[tool.ruff.lint.per-file-ignores]
"migrations/*" = ["INP001"]  # Implicit namespace packages are not allowed
"tests/*" = ["ARG001"]  # Unused function argument

[tool.mypy]
strict = true
pretty = true
python_version = "3.12"

ignore_missing_imports = true
install_types = true
non_interactive = true
plugins = ["pydantic.mypy"]

# from https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = true

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = false

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
parallel = true
branch = true
concurrency = ["greenlet", "thread"]
source = ["fastid"]
context = '${CONTEXT}'
omit = ["**/__init__.py"]

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_also = [
    "if __name__ == .__main__.:",
#    "self.logger",
    "def __repr__",
    "lambda: None",
    "from .*",
    "import .*",
    '@(abc\.)?abstractmethod',
    "raise NotImplementedError",
    'raise AssertionError',
#    'logger\..*',
    "pass",
    '\.\.\.',
]
omit = [
    '*/__about__.py',
    '*/__main__.py',
    '*/__init__.py',
    '*/dependencies.py',
    "fastid/plugins/*",
    "fastid/pages/*",
    "fastid/dashboard/*",
    "fastid/core/*",
    "fastid/api/*",
]


[tool.codespell]
skip = "./venv*,./docs/site/*,./htmlcov"
ignore-words = ".codespell-whitelist.txt"
