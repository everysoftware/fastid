{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastID","text":"<p> FastID authentication platform, high security, lightning fast, easy-to-use, customizable. </p> <p> </p> <p>Live Demo: https://fastid.croce.ru</p> <p>Documentation: https://everysoftware.github.io/fastid</p> <p>Source Code: https://github.com/everysoftware/fastid</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Secure: Reliable authentication without exposing user credentials to the clients (thanks   to OAuth 2.0 and OpenID Connect).</li> <li>Fast: Powered by FastAPI (one of the fastest Python web frameworks   available)   and SQLAlchemy.</li> <li>Easy-to-use: Comes with an admin dashboard to manage users and applications. Built-in user profile pages for   account management.</li> <li>Quickly start: Supports sign up with Google, Yandex, etc. Advanced integration with Telegram.</li> <li>In touch with users: Greets users after registration and verifies their actions via OTP.</li> <li>Customizable: Changes the appearance with custom templates for pages and email messages. Functionality can be   extended with plugins.</li> <li>Observable: Monitor the platform's performance with 3 pills of observability: logging, metrics and tracing   complied. Fully compatible with OpenTelemetry.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Clone the repository:</p> <pre><code>git clone https://github.com/everysoftware/fastid\n</code></pre> <p>Generate RSA keys:</p> <pre><code>make certs\n</code></pre> <p>Create a <code>.env</code> file based on <code>.env.example</code> and run the server:</p> <pre><code>make up\n</code></pre> <p>FastID is available at http://localhost:8012:</p> <p> </p> <p>Admin panel is available at: http://localhost:8012/admin:</p> <p> </p> <p>To set up observability, you can use this preset.</p> <p>Enjoy! \ud83d\ude80</p>"},{"location":"#get-started","title":"Get Started","text":"<p>To start using FastID, you need to create an application in the admin panel. This will allow you to use FastID for authentication in your application.</p> <p></p> <p>Once you have created an application, you can use the standard OAuth 2.0 flow to authenticate users. FastID supports the authorization code flow, which is the most secure and recommended way to authenticate users.</p> <p>Here is an example of how to use FastID for authentication in a Python application using the FastAPI framework and the httpx library.</p> <pre><code>from typing import Any\nfrom urllib.parse import urlencode\n\nimport httpx\nfrom fastapi import FastAPI, Request\nfrom fastapi.responses import RedirectResponse\n\nFASTID_URL = \"http://localhost:8012\"\nFASTID_CLIENT_ID = ...\nFASTID_CLIENT_SECRET = ...\n\napp = FastAPI()\n\n\n@app.get(\"/login\")\ndef login(request: Request) -&gt; Any:\n    params = {\n        \"response_type\": \"code\",\n        \"client_id\": FASTID_CLIENT_ID,\n        \"redirect_uri\": request.url_for(\"callback\"),\n        \"scope\": \"openid\",\n    }\n    url = f\"{FASTID_URL}/authorize?{urlencode(params)}\"\n    return RedirectResponse(url=url)\n\n\n@app.get(\"/callback\")\ndef callback(code: str) -&gt; Any:\n    response = httpx.post(\n        f\"{FASTID_URL}/api/v1/token\",\n        headers={\"Content-Type\": \"application/x-www-form-urlencoded\"},\n        data={\n            \"grant_type\": \"authorization_code\",\n            \"client_id\": FASTID_CLIENT_ID,\n            \"client_secret\": FASTID_CLIENT_SECRET,\n            \"code\": code,\n        },\n    )\n    token = response.json()[\"access_token\"]\n    response = httpx.get(\n        f\"{FASTID_URL}/api/v1/userinfo\",\n        headers={\"Authorization\": f\"Bearer {token}\"},\n    )\n    return response.json()\n</code></pre> <p>In this example, we define two routes:</p> <ol> <li><code>/login</code>: Redirects the user to the FastID authorization page.</li> <li><code>/callback</code>: Handles the callback from FastID after the user has logged in. It exchanges the authorization code for    an access token and retrieves the user's information.</li> </ol> <p>Run the FastAPI application:</p> <pre><code>fastapi dev examples/httpx.py\n</code></pre> <p>Visit http://localhost:8000/login to start the authentication process. You will be redirected to the FastID login page, where you can log in with your credentials or use a third-party provider.</p> <p></p> <p>After logging in, you will be redirected to the <code>/callback</code> route, where you can access the user's information.</p> <p></p> <p>Made with \u2764\ufe0f</p>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#user-pages","title":"User Pages","text":""},{"location":"overview/#admin-dashboard","title":"Admin Dashboard","text":""},{"location":"overview/#api-docs","title":"API Docs","text":""},{"location":"tutorial/","title":"Introduction","text":"<p>Here are the introductory sections and the tutorials to learn FastID.</p> <p>You could consider this a book, a course, the official and recommended way to learn FastID. \ud83d\ude0e</p>"},{"location":"tutorial/api/","title":"API Docs","text":""},{"location":"tutorial/api/#swagger-ui","title":"Swagger UI","text":"<p>API docs are available at http://localhost:8012/api/v1/docs</p> <p></p>"},{"location":"tutorial/api/#openid-connect","title":"OpenID Connect","text":"<p>OpenID metadata is available at http://localhost:8012/.well-known/openid-configuration.</p> <pre><code>{\n  \"issuer\": \"http://localhost:8012\",\n  \"authorization_endpoint\": \"http://localhost:8012/authorize\",\n  \"token_endpoint\": \"http://localhost:8012/api/v1/token\",\n  \"userinfo_endpoint\": \"http://localhost:8012/api/v1/userinfo\",\n  \"jwks_uri\": \"http://localhost:8012/.well-known/jwks.json\",\n  \"scopes_supported\": [\n    \"openid\",\n    \"email\",\n    \"name\",\n    \"offline_access\"\n  ],\n  \"response_types_supported\": [\n    \"code\"\n  ],\n  \"grant_types_supported\": [\n    \"authorization_code\",\n    \"refresh_token\"\n  ],\n  \"subject_types_supported\": [\n    \"public\"\n  ],\n  \"id_token_signing_alg_values_supported\": [\n    \"RS256\"\n  ],\n  \"claims_supported\": [\n    \"iss\",\n    \"sub\",\n    \"aud\",\n    \"typ\",\n    \"iat\",\n    \"exp\",\n    \"name\",\n    \"given_name\",\n    \"family_name\",\n    \"email\",\n    \"email_verified\"\n  ]\n}\n</code></pre>"},{"location":"tutorial/get_started/","title":"Get Started","text":""},{"location":"tutorial/get_started/#create-app","title":"Create App","text":"<p>To start using FastID, you need to create an application in the admin panel. This will allow you to use FastID for authentication in your application.</p> <p></p> <p>Once you have created an application, you can use the standard OAuth 2.0 flow to authenticate users. FastID supports the authorization code flow, which is the most secure and recommended way to authenticate users.</p>"},{"location":"tutorial/get_started/#httpx-example","title":"HTTPX Example","text":"<p>Here is an example of how to use FastID for authentication in a Python application using the FastAPI framework and the httpx library.</p> <pre><code>from typing import Any\nfrom urllib.parse import urlencode\n\nimport httpx\nfrom fastapi import FastAPI, Request\nfrom fastapi.responses import RedirectResponse\n\nFASTID_URL = \"http://localhost:8012\"\nFASTID_CLIENT_ID = ...\nFASTID_CLIENT_SECRET = ...\n\napp = FastAPI()\n\n\n@app.get(\"/login\")\ndef login(request: Request) -&gt; Any:\n    params = {\n        \"response_type\": \"code\",\n        \"client_id\": FASTID_CLIENT_ID,\n        \"redirect_uri\": request.url_for(\"callback\"),\n        \"scope\": \"openid\",\n    }\n    url = f\"{FASTID_URL}/authorize?{urlencode(params)}\"\n    return RedirectResponse(url=url)\n\n\n@app.get(\"/callback\")\ndef callback(code: str) -&gt; Any:\n    response = httpx.post(\n        f\"{FASTID_URL}/api/v1/token\",\n        headers={\"Content-Type\": \"application/x-www-form-urlencoded\"},\n        data={\n            \"grant_type\": \"authorization_code\",\n            \"client_id\": FASTID_CLIENT_ID,\n            \"client_secret\": FASTID_CLIENT_SECRET,\n            \"code\": code,\n        },\n    )\n    token = response.json()[\"access_token\"]\n    response = httpx.get(\n        f\"{FASTID_URL}/api/v1/userinfo\",\n        headers={\"Authorization\": f\"Bearer {token}\"},\n    )\n    return response.json()\n</code></pre>"},{"location":"tutorial/get_started/#fastlink-example","title":"FastLink Example","text":"<p>You can also use the FastLink as a faster and safer way:</p> <pre><code>from typing import Annotated, Any\n\nfrom fastapi import Depends, FastAPI\nfrom fastapi.responses import RedirectResponse\nfrom fastlink import FastLink\nfrom fastlink.schemas import OAuth2Callback, ProviderMeta\n\napp = FastAPI()\nfastid = FastLink(\n    ProviderMeta(server_url=\"http://localhost:8012\", scope=[\"openid\"]),\n    ...,  # Client ID\n    ...,  # Client Secret\n    \"http://localhost:8000/callback\",\n)\n\n\n@app.get(\"/login\")\nasync def login() -&gt; Any:\n    async with fastid:\n        url = await fastid.login_url()\n        return RedirectResponse(url=url)\n\n\n@app.get(\"/callback\")\nasync def callback(call: Annotated[OAuth2Callback, Depends()]) -&gt; Any:\n    async with fastid:\n        return await fastid.callback_raw(call)\n</code></pre>"},{"location":"tutorial/get_started/#results","title":"Results","text":"<p>In this example, we define two routes:</p> <ol> <li><code>/login</code>: Redirects the user to the FastID authorization page.</li> <li><code>/callback</code>: Handles the callback from FastID after the user has logged in. It exchanges the authorization code for    an access token and retrieves the user's information.</li> </ol> <p>Run the FastAPI application:</p> <pre><code>fastapi dev examples/httpx.py\n</code></pre> <p>Visit http://localhost:8000/login to start the authentication process. You will be redirected to the FastID login page, where you can log in with your credentials or use a third-party provider.</p> <p></p> <p>After logging in, you will be redirected to the <code>/callback</code> route, where you can access the user's information.</p> <p></p>"},{"location":"tutorial/notifications/","title":"Notifications","text":"<p>FastID supports sending notifications to users via E-mail and Telegram. This is useful for sending welcome messages, OTPs, and other important information.</p>"},{"location":"tutorial/notifications/#e-mail","title":"E-mail","text":"<p>You can use any SMTP server to send emails. The following example uses Gmail's SMTP server.</p> <p>Add the following lines to your <code>.env</code> file:</p> <pre><code>NOTIFY_FROM_NAME=\"FastID\"\nNOTIFY_SMTP_HOST=\"smtp.gmail.com\"\nNOTIFY_SMTP_PORT=465\nNOTIFY_SMTP_USERNAME=...\nNOTIFY_SMTP_PASSWORD=...\n</code></pre> <p></p>"},{"location":"tutorial/notifications/#telegram","title":"Telegram","text":"<p>Visit https://t.me/BotFather to create a new bot and obtain the token.</p> <p>Add the following to your <code>.env</code> file:</p> <pre><code>TELEGRAM_ENABLED=1\nTELEGRAM_BOT_TOKEN=...\n</code></pre> <p></p>"},{"location":"tutorial/observability/","title":"Observability","text":"<p>FastID provides built-in support for observability using Grafana, Prometheus, Tempo, and Loki. This allows you to monitor your application performance and log data effectively.</p>"},{"location":"tutorial/observability/#setup","title":"Setup","text":"<p>Repository containing the required infrastructure and sample dashboards: https://github.com/everysoftware/fastapi-obs.</p> <p>To use the observability features, you need to have the following environment variables set in your <code>.env</code> file:</p> <pre><code>OBS_ENABLED=1\nOBS_TEMPO_URL=\"http://TEMPO_URL:4317\"\n</code></pre> <p> </p>"},{"location":"tutorial/social/","title":"Social Login","text":"<p>Social login allows users to authenticate using their existing accounts from popular platforms like Google, Yandex, Telegram and others.</p> <p>To enable social login, you need to register your application with the respective social platform and obtain client credentials. Then, you can configure FastID to use these credentials.</p>"},{"location":"tutorial/social/#google","title":"Google","text":"<p>Visit https://console.cloud.google.com/apis/credentials to obtain client credentials.</p> <p>Add the following to your <code>.env</code> file:</p> <pre><code>GOOGLE_ENABLED=1\nGOOGLE_CLIENT_ID=...\nGOOGLE_CLIENT_SECRET=...\n</code></pre> <p></p>"},{"location":"tutorial/social/#yandex","title":"Yandex","text":"<p>Visit https://oauth.yandex.ru to obtain client credentials.</p> <p>Add the following to your <code>.env</code> file:</p> <pre><code>YANDEX_ENABLED=1\nYANDEX_CLIENT_ID=...\nYANDEX_CLIENT_SECRET=...\n</code></pre> <p></p>"},{"location":"tutorial/social/#telegram","title":"Telegram","text":"<p>Visit https://t.me/BotFather to create a new bot and obtain the token. Set the domain for the bot in the BotFather settings.</p> <p>Add the following to your <code>.env</code> file:</p> <pre><code>TELEGRAM_ENABLED=1\nTELEGRAM_BOT_TOKEN=...\n</code></pre> <p></p>"},{"location":"tutorial/social/#other-providers","title":"Other Providers","text":"<p>FastID uses FastLink for social login. You can implement any provider using the FastLink API. The process is similar to the ones described above.</p>"}]}